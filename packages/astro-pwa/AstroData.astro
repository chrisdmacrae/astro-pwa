---
import type { Store } from './stores/store'
import { dehydrateStores } from './stores/hydration'
import { getClientStoreData } from './session/temporary'

export interface Props {
  stores: Store<any>[]
  [key: string]: any
}

const { stores = [], router = {}, output = "server" } = Astro.props
const {data = {}} = getClientStoreData(Astro.request)

// Ensure the stores are "immutable" per request
if (stores) {
  stores.forEach(store => store.set(store.defaultValue))

  // Restore the store data from the request
  Object.keys(data).forEach(name => {
    const store = stores.find(store => store.name === name)

    if (store) {
      const currentData = store.get()
      const routerData = data[name]
      const hydrationData = { ...currentData, ...routerData }

      store.set(hydrationData)
    }
  })
}

const dehydratedStores = dehydrateStores(stores)
const astroData = {...router, data: dehydratedStores, output }
---
<script type="application/json" id="__astro-data" set:html={JSON.stringify(astroData)} />
<script>
    import { createClientStoreRegistry } from 'astro-pwa/stores/clientStoreRegistry';

    createClientStoreRegistry()
</script>
<slot />
