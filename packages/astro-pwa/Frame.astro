---
// This renders an island of "server-rendered" content for a given route
// It will allow the router to do fine-grained updates of a given page's content
// And will have behaviours of whether a frame should come or go on a given route
// It will also serialize the data for a given frame into the frame
// To allow for server-side persistence and hydration

import { dehydrateStores } from './src/stores/hydration';
import { hydrateServerStore } from './src/stores/hydration';
import type { Store } from './src/stores/store';

export interface Props {
  id: string
  stores?: Store<any>[]
  [key: string]: any
}

const { id, stores = [], ...props } = Astro.props

if (stores) {
  stores.forEach(store => {
    hydrateServerStore(store, Astro.request)
  })
}

const dehydratedStores = dehydrateStores(stores)
const astroData = { data: dehydratedStores }
---
<script>
  import type { Store } from './src/stores/store'
  import { useRouter } from "./src/routing/router"
  import { createClientStoreRegistry, getClientStoreRegistryStore } from './src/stores/clientStoreRegistry'
  import { hydrateClientStore } from './src/stores/hydration'

  createClientStoreRegistry()

  export class AstroFrame extends HTMLElement {
    public stores: Store[] = []
    private listeners: Function[] = []

    constructor() {
      super()
    }

    public connectedCallback() {
      const registry = getClientStoreRegistryStore()

      if (registry) {
        registry.listen(stores => {
          const myStores = this.getAttribute('stores')?.split(',') || []

          stores.forEach(store => {
            if (myStores.includes(store.name) && !this.stores.includes(store)) {
              hydrateClientStore(this, store)

              this.stores.push(store)
            }
          })
        })
      }
    }

    static get observedAttributes() { return ['src']; }
    public attributeChangedCallback(name: string, oldValue: any, newValue: any) {

    } 

    public disconnectedCallback() {
      this.listeners.forEach((cb, i) => {
        cb()
      })
    }
  }

  customElements.define('astro-frame', AstroFrame)
</script>
<astro-frame id={id} stores={stores.map(store => store.name)} {...props}>
  <script type="application/json" set:html={JSON.stringify(astroData)} data-astro />
  <slot />
</astro-frame>
