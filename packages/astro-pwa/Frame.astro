---
// This renders an island of "server-rendered" content for a given route
// It will allow the router to do fine-grained updates of a given page's content
// And will have behaviours of whether a frame should come or go on a given route
// It will also serialize the data for a given frame into the frame
// To allow for server-side persistence and hydration

import { dehydrateStores, hydrateServerStore } from './src/stores/hydration';
import type { Store } from './src/stores/store';
import { createStoreRegistry, getStoresFromRegistry } from './src/stores/storeRegistry';

export interface Props {
  id: string
  src?: string
  stores?: Store[]
  "server:isolate"?: boolean | "a" | "form"
  [key: string]: any
}

const { id, stores: stores = [], ...props } = Astro.props

// Prepare for render
createStoreRegistry(id)
const slotContent = await Astro.slots.render('default')

// Collect all stores
const registeredStores = getStoresFromRegistry(id)
const allStores = [...registeredStores, ...stores]
allStores.forEach(store => hydrateServerStore(id, store, Astro.request))

// Prepare frame for client
const storeNames = allStores.map(store => store.name).join(', ')
const dehydratedStores = dehydrateStores(allStores)
const astroData = JSON.stringify({ data: dehydratedStores })
---
<script>
  import { AstroFrame } from './src/frames/frame'

  customElements.define('astro-frame', AstroFrame)
</script>
<astro-frame id={id} stores={storeNames} data={astroData} {...props}>
  <Fragment set:html={slotContent} />
</astro-frame>
