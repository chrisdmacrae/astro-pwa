---
// This renders an island of "server-rendered" content for a given route
// It will allow the router to do fine-grained updates of a given page's content
// And will have behaviours of whether a frame should come or go on a given route
// It will also serialize the data for a given frame into the frame
// To allow for server-side persistence and hydration

import { dehydrateStores } from './src/stores/hydration';
import { hydrateServerStore } from './src/stores/hydration';
import type { Store } from './src/stores/store';

export interface Props {
  id: string
  src?: string
  stores?: Store<any>[]
  "client:isolate"?: boolean | "a" | "form"
  "server:only"?: boolean
  [key: string]: any
}

const { id, stores = [], ...props } = Astro.props

if (stores) {
  stores.forEach(store => {
    hydrateServerStore(store, Astro.request)
  })
}

const dehydratedStores = dehydrateStores(stores)
const astroData = { data: dehydratedStores }
---
<script>
  import { AstroFrame } from './src/frames/frame'
  import { createClientStoreRegistry } from './src/stores/clientStoreRegistry'

  createClientStoreRegistry()

  customElements.define('astro-frame', AstroFrame)
</script>
<astro-frame id={id} stores={stores.map(store => store.name)} {...props}>
  <script type="application/json" set:html={JSON.stringify(astroData)} data-astro />
  <slot />
</astro-frame>
