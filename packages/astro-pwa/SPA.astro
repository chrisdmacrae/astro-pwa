---
import type { Route } from './routing/types';
import { createDehydratedRouter } from './routing/server';
import type { Store } from './stores/store';
import Stores from './Stores.astro';

export interface Props {
  routes: Route[]
  // TODO: decide if this API should exist, or an imperative one
  // using useStore and useStores should be used instead
  stores?: Store<any>[]
  output?: "server" | "static"
  [key: string]: any
}

const { routes, stores = [], output = "static", ...props } = Astro.props
const router = await createDehydratedRouter(Astro, { routes: routes, output: output })
---
<div id="__astro" {...props}>
  <Stores stores={stores} output={output} data={router.data} router={router} />
    <script>
      import { createRouter, getDehydratedRouter, routerStore } from 'astro-pwa/routing/client'

      const dehydratedRouter = getDehydratedRouter()
      const hasRouter = Object.keys(routerStore.get()).keys.length !== 0

      if (dehydratedRouter && !hasRouter) {
        createRouter(dehydratedRouter)
      }
    </script>
    <slot />
</div>
