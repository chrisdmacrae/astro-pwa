---
import { createRouter, Route } from './routing/router';
import type { Store } from './stores/store';
import AstroData from './AstroData.astro';

export interface Props {
  routes: Route[]
  stores?: Store<any>[]
  output?: "server" | "static"
  [key: string]: any
}

const { routes, stores = [], output = "static", ...props } = Astro.props

const router = createRouter({
  path: Astro.url.pathname,
  params: Astro.params,
  routes: routes
})
---
<div id="__astro" {...props}>
  <AstroData stores={stores} router={router.dehydrate()} output={output} />
  <script>
    import { createRouter, routerStore, DehydratedRouter } from 'astro-pwa/routing/router'
    import { getDehydratedData } from './session/temporary'

    const dehydratedData = getDehydratedData()
    const hasRouter = Object.keys(routerStore.get()).keys.length !== 0

    if (dehydratedData.path && !hasRouter) {
      createRouter(dehydratedData as DehydratedRouter)
    }
  </script>
  <slot />
</div>
