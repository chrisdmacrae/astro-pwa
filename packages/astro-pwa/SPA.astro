---
import { createRouter, Route } from './src/routing/router';
import type { Store } from './src/stores/store';
import Island from './Island.astro';

export interface Props {
  routes: Route[]
  stores?: Store<any>[]
  output?: "server" | "static"
  [key: string]: any
}

const { routes, stores = [], output = "static", ...props } = Astro.props

// Generate server-side router context
const router = createRouter({
  path: Astro.url.pathname,
  params: Astro.params,
  routes: routes
})
---
<Island id="__astro" stores={stores} router={JSON.stringify(router.dehydrate())} output={output} {...props}>
  <slot />
  <script>
    import type { AstroFrame } from './Island.astro.__script1'
    import { createRouter, routerStore, DehydratedRouter } from './src/routing/router'
    
    const astroSpa: AstroFrame = document.getElementById('__astro')
    if (astroSpa) {
      const dehydratedRouter = JSON.parse(astroSpa.getAttribute('router') || '{}') as DehydratedRouter
      const hasRouter = Object.keys(routerStore.get()).keys.length !== 0
      
      if (dehydratedRouter && !hasRouter) {
        const router = createRouter(dehydratedRouter)

        router.on('change', () => {
          const astroSpa: AstroFrame = document.getElementById('__astro')

          astroSpa.readyForRouting()
        })
      }
    }
  </script>
</Island>
