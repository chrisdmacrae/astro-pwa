---
import { createRouter, Route } from './src/routing/router';
import type { Store } from './src/stores/store';
import Island from './Island.astro';

export interface Props {
  routes: Route[]
  stores?: Store<any>[]
  output?: "server" | "static"
  [key: string]: any
}

const { routes, stores = [], output = "static", ...props } = Astro.props

// Generate server-side router context
createRouter({
  path: Astro.url.pathname,
  params: Astro.params,
  routes: routes
})
---
<Island id="__astro" stores={stores} {...props}>
  <slot />
  <script>
    import { createRouter, routerStore, DehydratedRouter } from './src/routing/router'
    import { getDehydratedData } from './src/session/temporary'

    const dehydratedData = getDehydratedData(document.getElementById('__astro'))
    const hasRouter = Object.keys(routerStore.get()).keys.length !== 0

    if (dehydratedData.path && !hasRouter) {
      createRouter(dehydratedData as DehydratedRouter)
    }
  </script>
</Island>
