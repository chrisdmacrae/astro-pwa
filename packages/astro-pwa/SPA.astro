---
import { createRouter, Route } from './src/routing/router';
import { getAstroData } from './src/session/temporary';
import Frame from './Frame.astro';
import type { Store } from './src/stores/store';

export interface Props {
  routes: Route[]
  stores: Store[]
  output?: "server" | "static"
  [key: string]: any
}

const { routes, stores = [], output = "static", ...props } = Astro.props

// Generate server-side router context
const router = createRouter({
  path: Astro.url.pathname,
  params: Astro.params,
  routes: routes
})

// Prepare SPA data
const {data} = getAstroData(Astro.request)
---
<script>
  // @ts-ignore
  import type { AstroFrame } from './Island.astro.__script1'
  import { createRouter, routerStore, DehydratedRouter } from './src/routing/router'
  import { listen } from './src/routing/spa'
  
  const astroSpa: AstroFrame = document.getElementById('__astro')
  if (astroSpa) {
    const dehydratedRouter = JSON.parse(astroSpa.getAttribute('router') || '{}') as DehydratedRouter
    const hasRouter = Object.keys(routerStore.get()).keys.length !== 0
    
    if (dehydratedRouter && !hasRouter) {
      const router = createRouter(dehydratedRouter)

      listen(router, astroSpa)
    }
  }
</script>
<Frame id="__astro" stores={stores} router={JSON.stringify(router.dehydrate())} output={output} data={JSON.stringify(data)} {...props}>
  <slot />
</Frame>
