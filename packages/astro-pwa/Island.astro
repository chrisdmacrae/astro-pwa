---
// This renders an island of "server-rendered" content for a given route
// It will allow the router to do fine-grained updates of a given page's content
// And will have behaviours of whether a frame should come or go on a given route
// It will also serialize the data for a given frame into the frame
// To allow for server-side persistence and hydration

import { getClientStoreData } from './src/session/temporary';
import { dehydrateStores } from './src/stores/hydration';
import type { Store } from './src/stores/store';

export interface Props {
  id: string
  stores: Store[]
  [key: string]: any
}

const { id, stores = [], ...props } = Astro.props

// Ensure the stores are "immutable" per request
const {data = {}} = getClientStoreData(Astro.request)
if (stores) {
  stores.forEach(store => store.set(store.defaultValue))

  // Restore the store data from the request
  Object.keys(data).forEach(name => {
    const store = stores.find(store => store.name === name)

    if (store) {
      const currentData = store.get()
      const routerData = data[name]
      const hydrationData = { ...currentData, ...routerData }

      store.set(hydrationData)
    }
  })
}

const dehydratedStores = dehydrateStores(stores)
const astroData = {data: dehydratedStores}
---
<astro-frame id={id} stores={stores.map(store => store.name)} {...props}>
  <script type="application/json" set:html={JSON.stringify(astroData)} data-astro />
  <slot />
  <script>
    import type { Store } from './src/stores/store'
    import { useRouter, Router } from "./src/routing/router"
    import { createClientStoreRegistry, getClientStoreRegistryStore } from './src/stores/clientStoreRegistry'
    import { hydrateClientStore } from './src/stores/hydration'

    createClientStoreRegistry()

    export class AstroFrame extends HTMLElement {
      public router: Router
      public stores: Store[] = []
      private listeners: Function[] = []

      constructor() {
        super()

        this.router = useRouter()
      }

      connectedCallback() {
        const registry = getClientStoreRegistryStore()

        if (registry) {
          registry.listen(stores => {
            console.log(stores, this.stores)
            stores.forEach(store => {
              if (!this.stores.includes(store)) {
                hydrateClientStore(this, store)

                console.log(store.get())

                this.stores.push(store)
              }
            })
          })
        }

        if (this.router.on) {
          this.listeners.push(this.router.on('change', params => console.log({ params })))
        }
      }

      disconnectedCallback() {
        this.listeners.forEach(cb => cb())
      }
    }

    customElements.define('astro-frame', AstroFrame)
  </script>
</astro-frame>
