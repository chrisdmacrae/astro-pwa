---
import type { Store } from './stores/store'
import { createRouter } from './routing/client'
import type { DehydratedRouter } from './routing/types'

export interface Props {
  stores: Store<any>[]
  data: Record<string, any>
  output?: "server" | "static"
  router?: DehydratedRouter
}

const { stores, data = {}, output = "static", router } = Astro.props

// Ensure the stores are "immutable" per request
if (stores) {
  stores.forEach(store => store.set(store.defaultValue))

  // Restore the store data from the request
  Object.keys(data).forEach(name => {
    const store = stores.find(store => store.name === name)

    if (store) {
      const currentData = store.get()
      const routerData = data[name]
      const hydrationData = { ...currentData, ...routerData }

      store.set(hydrationData)
    }
  })
}

if (router) {
  // This is a hack to have the router ready for SSR
  createRouter(router)
}
---
<script type="application/json" id="__astro-data" set:html={JSON.stringify({ ...router, data, config: { output } })} />
<script>
    import { createClientStoreRegistry, getClientStoreRegistry } from 'astro-pwa/stores/clientStoreRegistry';
    import { getDehydratedRouter } from './routing/client';
    import { dehydrateStores } from './stores/hydration';
    import { sendClientStoreData } from './stores/persistence';

    createClientStoreRegistry()

    const dehydratedRouter = getDehydratedRouter()
    if (dehydratedRouter?.config.output === "server" && !dehydratedRouter.url !== undefined) {
      window.addEventListener('click', (e) => {
        const el = e.target as HTMLAnchorElement
        const data = dehydrateStores(getClientStoreRegistry())

        if (el.tagName === "A") {
          e.preventDefault()
            sendClientStoreData(el.href, dehydratedRouter.config.output, data)
              .then(() => window.location.href = el.href)
        }
      })
    }
</script>
<slot />
